#!/usr/bin/env node
const axios = require( 'axios' );
const http = require( 'http' );

const config = require( '../config' )[ process.env.NODE_ENV || 'development' ];

const log = config.log();
const service = require( '../server/service' )( config );

const server = http.createServer( service );

/**
** Important - a service should not have a fixed 
** port but should randomly choose one.
**/
server.listen( process.env.PORT || 0 );

server.on( 'listening', () => {

	const getUrl = ( action = 'register' ) => [ 'http://localhost:3000', 
		action, config.name, config.version, server.address().port, 
	].join( '/' );
	
	const registerService = () => axios.put( getUrl( 'register' ) ).catch( err => log.fatal( err ) );
	const unregisterService = () => axios.delete( getUrl( 'unregister' ) ).catch( err => log.fatal( err ) );

	registerService();

	/**
	** 
	**/
	const interval = setInterval( registerService, 15 * 1000 );

	const cleanup = async () => {

		let clean = false;

		if ( !clean ) {

			clean = true;
	
			clearInterval( interval );
			await unregisterService();

		}

	};

	process.on( 'uncaughtException', async () => {
		
		await cleanup();
		process.exit( 0 );
	
	} );

	process.on( 'SIGINT', async () => {
		
		await cleanup();
		process.exit( 0 );
	
	} );

	process.on( 'SIGTERM', async () => {
		
		await cleanup();
		process.exit( 0 );
	
	} );

	log.info( `Hi there! I'm listening on port ${ server.address().port } in ${ service.get( 'env' ) } mode.` );

} );